import express from "express";
import http from "http";
import { Server } from "socket.io";
import mongoose from "mongoose";
import cors from "cors";
import dotenv from "dotenv";

import authRoutes from "./routes/authRoutes.js";
import challengeRoutes from "./routes/challengeRoutes.js";
import submissionRoutes from "./routes/submissionRoutes.js";
import testRoutes from "./routes/testRoutes.js";

// Configuration de base
dotenv.config();

// Constantes
const PORT = process.env.PORT || 3000;
const MONGODB_URI = 'mongodb://127.0.0.1:27017/codearena';

// Créer l'application Express
const app = express();
const server = http.createServer(app);

// Configuration CORS pour Socket.io
const io = new Server(server, {
  cors: {
    origin: process.env.FRONTEND_URL || "http://localhost:5173",
    methods: ["GET", "POST"],
    credentials: true
  }
});

// Middlewares
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cors({
  origin: "*",
  credentials: true
}));

// Routes API
app.use("/api/auth", authRoutes);
app.use("/api/challenges", challengeRoutes);
app.use("/api/submissions", submissionRoutes);
app.use("/api/test", testRoutes);

// Route principale
app.get("/", (req, res) => {  
  res.json({
    message: "🎮 Hello CodeArena! Backend is running...",
    version: "1.0.0",
    status: "operational",
    timestamp: new Date().toISOString()
  });
});

// Route de santé
app.get("/api/health", (req, res) => {
  res.json({
    status: "healthy",
    database: mongoose.connection.readyState === 1 ? "connected" : "disconnected",
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

// Gestion des salles multijoueurs
const rooms = {};

io.on("connection", (socket) => {
  console.log(`✅ Nouvelle connexion Socket.io: ${socket.id}`);

  socket.on("joinRoom", ({ roomId, username }) => {
    socket.join(roomId);
    if (!rooms[roomId]) rooms[roomId] = {};
    rooms[roomId][socket.id] = { username, score: 0 };
    io.to(roomId).emit("roomUpdate", rooms[roomId]);
  });

  socket.on("updateScore", ({ roomId, score }) => {
    if (rooms[roomId]?.[socket.id]) {
      rooms[roomId][socket.id].score = score;
      const sortedParticipants = Object.fromEntries(
        Object.entries(rooms[roomId]).sort(([, a], [, b]) => b.score - a.score)
      );
      io.to(roomId).emit("roomUpdate", sortedParticipants);
    }
  });

  socket.on("disconnect", () => {
    Object.keys(rooms).forEach(roomId => {
      if (rooms[roomId]?.[socket.id]) {
        delete rooms[roomId][socket.id];
        io.to(roomId).emit("roomUpdate", rooms[roomId]);
      }
    });
  });
});

// Connexion MongoDB et démarrage du serveur
const startServer = async () => {
  try {
    await mongoose.connect(MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true
    });
    
    console.log("✅ Connecté à MongoDB");
    
    server.listen(PORT, () => {
      console.log(`🚀 Serveur démarré sur http://localhost:${PORT}`);
    });
  } catch (error) {
    console.error("❌ Erreur de démarrage:", error);
    process.exit(1);
  }
};

startServer();